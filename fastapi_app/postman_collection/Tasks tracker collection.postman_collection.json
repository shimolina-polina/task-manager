{
	"info": {
		"_postman_id": "25194a69-832a-4799-9411-a40ee0a9bfca",
		"name": "Tasks tracker collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34692437"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "get users list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(user){\r",
									"    pm.expect(user).to.have.property('username');\r",
									"    pm.expect(user).to.have.property('email');\r",
									"    pm.expect(user).to.have.property('id');\r",
									"    pm.expect(user).to.have.property('created_at');\r",
									"    pm.expect(user).to.have.property('updated_at');\r",
									"    pm.expect(user).to.have.property('team_id');\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  responseData.forEach(function(user) {\r",
									"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate that created_at is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(user) {\r",
									"        pm.expect(user.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/\r",
									");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "get users list",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"users",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Tue, 23 Jul 2024 13:08:39 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "257"
								},
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"username\": \"user\",\n        \"email\": \"user@mail.com\",\n        \"id\": 3,\n        \"created_at\": \"2024-07-23T12:39:21.279334Z\",\n        \"updated_at\": null,\n        \"team_id\": null\n    },\n    {\n        \"username\": \"admin\",\n        \"email\": \"admin@mail.com\",\n        \"id\": 4,\n        \"created_at\": \"2024-07-23T12:39:21.279334Z\",\n        \"updated_at\": null,\n        \"team_id\": null\n    }\n]"
						}
					]
				},
				{
					"name": "get users list skip 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(user){\r",
									"    pm.expect(user).to.have.property('username');\r",
									"    pm.expect(user).to.have.property('email');\r",
									"    pm.expect(user).to.have.property('id');\r",
									"    pm.expect(user).to.have.property('created_at');\r",
									"    pm.expect(user).to.have.property('updated_at');\r",
									"    pm.expect(user).to.have.property('team_id');\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  responseData.forEach(function(user) {\r",
									"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate that created_at is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(user) {\r",
									"        pm.expect(user.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/\r",
									");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/users/?skip=1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "get users list skip 1",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/users/?skip=1",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"users",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Tue, 23 Jul 2024 13:08:50 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "130"
								},
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"username\": \"admin\",\n        \"email\": \"admin@mail.com\",\n        \"id\": 4,\n        \"created_at\": \"2024-07-23T12:39:21.279334Z\",\n        \"updated_at\": null,\n        \"team_id\": null\n    }\n]"
						}
					]
				},
				{
					"name": "get users list limit 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"  responseData.forEach(function(user){\r",
									"    pm.expect(user).to.have.property('username');\r",
									"    pm.expect(user).to.have.property('email');\r",
									"    pm.expect(user).to.have.property('id');\r",
									"    pm.expect(user).to.have.property('created_at');\r",
									"    pm.expect(user).to.have.property('updated_at');\r",
									"    pm.expect(user).to.have.property('team_id');\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  responseData.forEach(function(user) {\r",
									"    pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate that created_at is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(user) {\r",
									"        pm.expect(user.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/\r",
									");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/users/?limit=1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": [
						{
							"name": "get users list limit 1",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/users/?limit=1",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"users",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Tue, 23 Jul 2024 13:08:59 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "128"
								},
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"username\": \"user\",\n        \"email\": \"user@mail.com\",\n        \"id\": 3,\n        \"created_at\": \"2024-07-23T12:39:21.279334Z\",\n        \"updated_at\": null,\n        \"team_id\": null\n    }\n]"
						}
					]
				},
				{
					"name": "get users list invalid limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Detail is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/users/?limit=-1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "get users list invalid limit",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/users/?limit=-1",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"users",
										""
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Tue, 23 Jul 2024 13:09:39 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "31"
								},
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Invalid parametres\"\n}"
						}
					]
				},
				{
					"name": "get users list invalid skip",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Detail is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/users/?skip=-1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							],
							"query": [
								{
									"key": "skip",
									"value": "-1"
								}
							]
						}
					},
					"response": [
						{
							"name": "get users list invalid skip",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/users/?skip=-1",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"users",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "-1"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Tue, 23 Jul 2024 13:10:21 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "31"
								},
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Invalid parametres\"\n}"
						}
					]
				},
				{
					"name": "post user with existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Detail is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user@mail.com\",\r\n    \"username\": \"user\",\r\n    \"password\": \"securepassword\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "post user with existing email",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"user@mail.com\",\r\n    \"username\": \"user\",\r\n    \"password\": \"securepassword\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"users",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Tue, 23 Jul 2024 13:19:57 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "37"
								},
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Email already registered\"\n}"
						}
					]
				},
				{
					"name": "post user with existing name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.detail).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Detail is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"newuser@mail.com\",\r\n    \"username\": \"user\",\r\n    \"password\": \"securepassword\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "post user with existing name",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"newuser@mail.com\",\r\n    \"username\": \"user\",\r\n    \"password\": \"securepassword\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"users",
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Tue, 23 Jul 2024 13:24:42 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "40"
								},
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"Username already registered\"\n}"
						}
					]
				},
				{
					"name": "post user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"   pm.test(\"Status code is 200\", function () {\r",
									"       pm.response.to.have.status(200);\r",
									"   });\r",
									"\r",
									"   pm.test(\"Response has required fields\", function () {\r",
									"       const responseJson = pm.response.json();\r",
									"       pm.expect(responseJson).to.have.property(\"id\");\r",
									"       pm.expect(responseJson).to.have.property(\"username\", \"newuser\");\r",
									"       pm.expect(responseJson).to.have.property(\"email\", \"newuser@mail.com\");\r",
									"       pm.expect(responseJson).to.have.property(\"team_id\", null);\r",
									"       pm.expect(responseJson).to.have.property(\"created_at\");\r",
									"       pm.expect(responseJson).to.have.property(\"updated_at\");\r",
									"   });\r",
									"   \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   pm.test(\"Request body has required fields\", function () {\r",
									"       const requestBody = pm.request.body.raw;\r",
									"       const jsonData = JSON.parse(requestBody);\r",
									"\r",
									"       pm.expect(jsonData).to.have.property(\"username\");\r",
									"       pm.expect(jsonData).to.have.property(\"email\");\r",
									"       pm.expect(jsonData).to.have.property(\"password\");\r",
									"   });\r",
									"\r",
									"   pm.test(\"Username is a string\", function () {\r",
									"       const requestBody = pm.request.body.raw;\r",
									"       const jsonData = JSON.parse(requestBody);\r",
									"       pm.expect(jsonData.username).to.be.a('string');\r",
									"   });\r",
									"\r",
									"   pm.test(\"Email is a valid format\", function () {\r",
									"       const requestBody = pm.request.body.raw;\r",
									"       const jsonData = JSON.parse(requestBody);\r",
									"       pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/); // Простая проверка формата email\r",
									"   });\r",
									"\r",
									"   pm.test(\"Password meets length requirements\", function () {\r",
									"       const requestBody = pm.request.body.raw;\r",
									"       const jsonData = JSON.parse(requestBody);\r",
									"       pm.expect(jsonData.password.length).to.be.greaterThan(6); // Проверяем, что длина пароля больше 6 символов\r",
									"   });\r",
									"   \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"newuser@mail.com\",\r\n    \"username\": \"newuser\",\r\n    \"password\": \"securepassword\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/users/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"users",
								""
							]
						}
					},
					"response": [
						{
							"name": "post user",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"newuser@mail.com\",\r\n    \"username\": \"newuser\",\r\n    \"password\": \"securepassword\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"users",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "date",
									"value": "Tue, 23 Jul 2024 14:41:15 GMT"
								},
								{
									"key": "server",
									"value": "uvicorn"
								},
								{
									"key": "content-length",
									"value": "132"
								},
								{
									"key": "content-type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"username\": \"newuser\",\n    \"email\": \"newuser@mail.com\",\n    \"id\": 8,\n    \"created_at\": \"2024-07-23T14:41:15.378463Z\",\n    \"updated_at\": null,\n    \"team_id\": null\n}"
						}
					]
				}
			]
		}
	]
}